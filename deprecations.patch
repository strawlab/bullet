Index: src/LinearMath/btQuaternion.h
===================================================================
--- src/LinearMath/btQuaternion.h	(revision 1779)
+++ src/LinearMath/btQuaternion.h	(working copy)
@@ -44,12 +44,12 @@
    * @param yaw Angle around Y unless BT_EULER_DEFAULT_ZYX defined then Z
    * @param pitch Angle around X unless BT_EULER_DEFAULT_ZYX defined then Y
    * @param roll Angle around Z unless BT_EULER_DEFAULT_ZYX defined then X */
-	btQuaternion(const btScalar& yaw, const btScalar& pitch, const btScalar& roll)
+  btQuaternion(const btScalar& yaw, const btScalar& pitch, const btScalar& roll) __attribute__((deprecated))
 	{ 
 #ifndef BT_EULER_DEFAULT_ZYX
 		setEuler(yaw, pitch, roll); 
 #else
-		setEulerZYX(yaw, pitch, roll); 
+		setRPY(roll, pitch, yaw);
 #endif 
 	}
   /**@brief Set the rotation using axis angle notation 
@@ -83,11 +83,11 @@
 			sinRoll * cosPitch * cosYaw - cosRoll * sinPitch * sinYaw,
 			cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw);
 	}
-  /**@brief Set the quaternion using euler angles 
-   * @param yaw Angle around Z
+  /**@brief Set the quaternion using fixed axis RPY
+   * @param roll Angle around X 
    * @param pitch Angle around Y
-   * @param roll Angle around X */
-	void setEulerZYX(const btScalar& yaw, const btScalar& pitch, const btScalar& roll)
+   * @param yaw Angle around Z*/
+  void setRPY(const btScalar& roll, const btScalar& pitch, const btScalar& yaw)
 	{
 		btScalar halfYaw = btScalar(yaw) * btScalar(0.5);  
 		btScalar halfPitch = btScalar(pitch) * btScalar(0.5);  
@@ -103,6 +103,14 @@
                          cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw, //z
                          cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw); //formerly yzx
 	}
+  /**@brief Set the quaternion using euler angles 
+   * @param yaw Angle around Z
+   * @param pitch Angle around Y
+   * @param roll Angle around X */
+  void setEulerZYX(const btScalar& yaw, const btScalar& pitch, const btScalar& roll) __attribute__((deprecated))
+	{
+          setRPY(roll, pitch, yaw);
+	}
   /**@brief Add two quaternions
    * @param q The quaternion to add to this one */
 	SIMD_FORCE_INLINE	btQuaternion& operator+=(const btQuaternion& q)
Index: src/LinearMath/btMatrix3x3.h
===================================================================
--- src/LinearMath/btMatrix3x3.h	(revision 1779)
+++ src/LinearMath/btMatrix3x3.h	(working copy)
@@ -158,27 +158,26 @@
 		}
 		
 
-	/** @brief Set the matrix from euler angles using YPR around YXZ respectively
-	*  @param yaw Yaw about Y axis
-	*  @param pitch Pitch about X axis
-	*  @param roll Roll about Z axis 
+	/** @brief Set the matrix from euler angles using YPR around ZYX respectively
+	*  @param yaw Yaw about Z axis
+	*  @param pitch Pitch about Y axis
+	*  @param roll Roll about X axis 
	*/
-	void setEulerYPR(const btScalar& yaw, const btScalar& pitch, const btScalar& roll) 
+	void setEulerZYX(const btScalar& yaw, const btScalar& pitch, const btScalar& roll) __attribute__((deprecated))
 	{
-		setEulerZYX(roll, pitch, yaw);
+		setEulerYPR(yaw, pitch, roll);
	}

	/** @brief Set the matrix from euler angles YPR around ZYX axes
+	* @param eulerZ Yaw aboud Z axis
+	* @param eulerY Pitch around Y axis
	* @param eulerX Roll about X axis
-	* @param eulerY Pitch around Y axis
-	* @param eulerZ Yaw aboud Z axis
	* 
	* These angles are used to produce a rotation matrix. The euler
	* angles are applied in ZYX order. I.e a vector is first rotated 
	* about X then Y and then Z
	**/
-	void setEulerZYX(btScalar eulerX,btScalar eulerY,btScalar eulerZ) { 
-		///@todo proposed to reverse this since it's labeled zyx but takes arguments xyz and it will match all other parts of the code
+	void setEulerYPR(btScalar eulerZ, btScalar eulerY,btScalar eulerX)  { 
		btScalar ci ( btCos(eulerX)); 
		btScalar cj ( btCos(eulerY)); 
		btScalar ch ( btCos(eulerZ)); 
@@ -265,40 +274,22 @@
		q.setValue(temp[0],temp[1],temp[2],temp[3]);
	}

-	/**@brief Get the matrix represented as euler angles around YXZ, roundtrip with setEulerYPR
-	* @param yaw Yaw around Y axis
-	* @param pitch Pitch around X axis
-	* @param roll around Z axis */	
-	void getEulerYPR(btScalar& yaw, btScalar& pitch, btScalar& roll) const
+	/**@brief Get the matrix represented as euler angles around ZYX
+	* @param yaw Yaw around Z axis
+	* @param pitch Pitch around Y axis
+	* @param roll around X axis 
+ 	* @param solution_number Which solution of two possible solutions ( 1 or 2) are possible values*/	
+	__attribute__((deprecated)) void getEulerZYX(btScalar& yaw, btScalar& pitch, btScalar& roll, unsigned int solution_number = 1) const
	{
-
-		// first use the normal calculus
-		yaw = btScalar(btAtan2(m_el[1].x(), m_el[0].x()));
-		pitch = btScalar(btAsin(-m_el[2].x()));
-		roll = btScalar(btAtan2(m_el[2].y(), m_el[2].z()));
-
-		// on pitch = +/-HalfPI
-		if (btFabs(pitch)==SIMD_HALF_PI)
-		{
-			if (yaw>0)
-				yaw-=SIMD_PI;
-			else
-				yaw+=SIMD_PI;
-
-			if (roll>0)
-				roll-=SIMD_PI;
-			else
-				roll+=SIMD_PI;
-		}
+		getEulerYPR(yaw, pitch, roll, solution_number);
 	};
 
 
-	/**@brief Get the matrix represented as euler angles around ZYX
-	* @param yaw Yaw around X axis
+	/**@brief Get the matrix represented as euler angles around YXZ, roundtrip with setEulerYPR
+	* @param yaw Yaw around Z axis
	* @param pitch Pitch around Y axis
-	* @param roll around X axis 
-	* @param solution_number Which solution of two possible solutions ( 1 or 2) are possible values*/	
-	void getEulerZYX(btScalar& yaw, btScalar& pitch, btScalar& roll, unsigned int solution_number = 1) const
+	* @param roll around X axis */	
+	void getEulerYPR(btScalar& yaw, btScalar& pitch, btScalar& roll, unsigned int solution_number = 1) const
	{
		struct Euler
		{
